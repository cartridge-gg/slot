# Query to fetch a single paymaster by ID
# Operation name `GetPaymaster` must match the struct name in Rust
query GetPaymaster($name: ID!) {
  paymaster(name: $name) {
    # Include all fields you need from the Paymaster type
    id
    name
    team {
      id
      name
    }
    policies {
      edges {
        node {
          id
          contractAddress
          entryPoint
          selector
        }
      }
    }
  }
}

# Mutation to create a new paymaster
# Operation name `CreatePaymaster` must match the struct name in Rust
mutation CreatePaymaster($name: String!, $teamName: String!, $budget: Int!, $unit: FeeUnit!) {
  createPaymaster(name: $name, teamName: $teamName, budget: $budget, unit: $unit) {
    id
    name
    team {
      id
      name
    }
  }
}

# Mutation to add policies to a paymaster
# Operation name `AddPolicies` must match the struct name in Rust
mutation AddPolicies(
  $paymasterName: ID!
  $policies: [PolicyInput!]!
) {
  addPolicies(paymasterName: $paymasterName, policies: $policies) {
    id
    contractAddress
    entryPoint
    selector
  }
}

# Mutation to remove policies from a paymaster
# Operation name `RemovePolicies` must match the struct name in Rust
mutation RemovePolicies($paymasterName: ID!, $policyIds: [ID!]!) {
  removePolicies(paymasterName: $paymasterName, policyIds: $policyIds)
}

# Mutation to remove all policies from a paymaster
# Operation name `RemoveAllPolicies` must match the struct name in Rust
mutation RemoveAllPolicies($paymasterName: ID!) {
  removeAllPolicies(paymasterName: $paymasterName)
}

# Mutation to increase a paymaster's budget
# Operation name `IncreaseBudget` must match the struct name in Rust
mutation IncreaseBudget($paymasterName: ID!, $amount: Int!, $unit: FeeUnit!) {
  increaseBudget(paymasterName: $paymasterName, amount: $amount, unit: $unit) {
    id
    name
  }
}

# Mutation to decrease a paymaster's budget
# Operation name `DecreaseBudget` must match the struct name in Rust
mutation DecreaseBudget($paymasterName: ID!, $amount: Int!, $unit: FeeUnit!) {
  decreaseBudget(paymasterName: $paymasterName, amount: $amount, unit: $unit) {
    id
    name
  }
}

# Query to list paymasters with pagination, filtering, and ordering
# Operation name `ListPaymasters` must match the struct name in Rust
query ListPaymasters {
  me {
    id
    teams {
      edges {
        node {
          name
          paymasters {
            edges {
              node {
                id
                name
                active
                budget
                budgetFeeUnit
                team {
                  id
                  name
                }
              }
            }
          }
        }
      }
    }
  }
}
